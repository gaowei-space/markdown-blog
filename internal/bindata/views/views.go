// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package views generated by go-bindata.// sources:
// web/views/errors/404.html
// web/views/errors/500.html
// web/views/index.html
// web/views/layouts/footer.html
// web/views/layouts/header.html
// web/views/layouts/layout.html
package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xcd\xe7\x79\x69\xa0\x87\x1d\xec\xc0\xe8\x5a\xd8\x65\xdb\xa1\x85\xed\xe8\xda\x3f\xb5\xc0\xb1\xb3\x54\x4d\xd9\xdb\x8f\x34\x1d\x74\x3b\x09\x7d\xfa\x3f\x81\x64\xee\x9e\xdf\x56\xdb\xcf\xf7\x35\x45\xe9\x52\x5b\x99\xa9\x50\x72\xf9\x60\x15\xb2\x9a\x00\x5c\x68\x2b\x22\x22\xd3\x41\x1c\xf9\xe8\x86\x23\xc4\xaa\xdd\x76\xa3\x1f\xd5\xed\x28\x8a\xf4\x1a\x5f\x27\x1e\xad\xfa\xd0\xbb\x27\xbd\x2a\x5d\xef\x84\xf7\x09\x8a\x7c\xc9\x82\x2c\x56\xbd\xac\x2d\xc2\x01\x7f\xcc\xec\x3a\x58\x35\x32\xce\x7d\x19\xe4\x26\x7c\xe6\x20\xd1\x06\x8c\xec\xa1\x2f\xcd\x3d\x71\x66\x61\x97\xf4\xd1\xbb\x04\xdb\x3c\x2c\x7e\x57\x09\x4b\x42\xbb\x5c\x2c\xe9\xb5\x08\x6d\xca\x29\x07\x53\xcf\xb0\x32\xf5\x7c\x88\xd9\x97\xf0\x7d\xcd\xc7\xa6\x35\x1e\x59\x30\xfc\x97\xae\xd4\xd4\xb1\x99\xd4\xd9\x31\xf5\xe5\x47\x3f\x01\x00\x00\xff\xff\xf0\x70\x71\x97\x33\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 307, mode: os.FileMode(420), modTime: time.Unix(1742730289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\x93\xf3\x42\xd9\x8d\x43\x52\x09\x8d\x21\x71\x1a\x87\x4d\x82\xa3\xd7\x5a\x8d\xa5\xd4\x29\xad\xb7\x6a\x6f\x8f\xba\x0c\x69\xdc\x38\x25\xbf\xfc\xf9\xb3\x6c\xff\xf0\xba\xdb\xec\xbf\x3e\xb6\x10\xb5\x4f\xb5\xf1\xcb\x03\x09\xa5\x0b\x96\xc4\xd6\xc6\xf8\x48\xd8\xd6\x06\x00\xc0\xf7\xa4\x08\x4d\xc4\x71\x22\x0d\xf6\xb0\x7f\x73\xcf\xf6\xbe\x14\x55\x07\x47\xdf\x27\x3e\x07\xfb\xe9\x0e\x2f\x6e\x93\xfb\x01\x95\x8f\x89\x2c\x34\x59\x94\x44\x83\x7d\xdf\x06\x6a\x3b\xfa\xd3\x29\xd8\x53\xb0\x67\xa6\x79\xc8\xa3\xde\xc1\x33\xb7\x1a\x43\x4b\x67\x6e\xc8\x5d\xc3\x0a\x58\x58\x19\x93\x9b\x1a\x4c\x14\xd6\x8f\x4f\xbf\x2a\x65\x4d\x54\xef\x4e\xc3\x04\x53\xee\x49\x23\x4b\x07\x33\x89\xc2\x3c\x66\xe9\x56\xa0\xe3\x05\xb0\x43\x16\x5f\x15\xd6\xf8\xaa\xec\x67\xfc\x31\xb7\x97\x9b\x27\xae\xcb\xe7\x1a\x1a\x12\xa5\xf1\x9f\xd6\x1b\x5c\x34\xd5\xe2\xf1\x55\x11\x2f\x93\x96\x13\xff\x04\x00\x00\xff\xff\x89\x94\x40\x58\x72\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 370, mode: os.FileMode(420), modTime: time.Unix(1742730289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\x2c\x2a\xc9\x4c\xce\x49\x55\x48\xce\x49\x2c\x2e\xb6\x55\xca\x4d\x2c\xca\x4e\xc9\x2f\xcf\xd3\x4d\xca\x4f\xa9\x54\xb2\xe3\x52\x50\x50\x50\xa8\xae\xd6\x73\x84\xa8\xaa\xad\xe5\xb2\xd1\x87\xea\xb0\x03\x04\x00\x00\xff\xff\x82\x8b\x94\x11\x3b\x00\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 59, mode: os.FileMode(420), modTime: time.Unix(1742730289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xce\x41\x8a\xc3\x20\x14\x06\xe0\xbd\xa7\xf8\xf1\x00\xba\x1f\x8c\x9b\x40\x60\x76\x03\x39\x81\x93\x98\xe4\x31\x19\x95\x28\x81\x22\x1e\xa8\xd7\xe8\xc9\x4a\x5a\x0c\xed\xae\xee\x7c\x8f\xf7\xfd\x7f\xce\xa0\x09\xe2\xbb\xfd\x41\x29\x4c\x8d\xb4\x63\x58\x4d\x8c\x0d\x9f\xbc\x4f\x76\xe3\x9a\x01\x80\x0a\xfa\x76\x45\xeb\xc3\x65\xa3\x79\x49\xc8\x59\x9c\x9f\x52\xa0\x4c\xbd\x5a\xc9\xfd\x71\x2c\x9b\x9d\x1a\xbe\xa4\x14\xe2\x97\x94\xbf\x96\x8c\x13\xff\x44\x49\xcc\x7e\x17\x83\xe3\x3a\xe7\x23\xb2\x14\x25\x8d\xc6\x23\xe1\x78\xb5\x4c\xdf\x1d\x65\xea\xf4\x23\x3c\xc4\x37\xbb\xef\x9e\xf6\x2b\x6d\xdd\x58\x59\x25\x83\x66\x4a\x8e\xb4\x6b\x76\x6e\xee\x01\x00\x00\xff\xff\xe6\x8c\xb5\xc8\x0b\x01\x00\x00")

func layoutsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsFooterHtml,
		"layouts/footer.html",
	)
}

func layoutsFooterHtml() (*asset, error) {
	bytes, err := layoutsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/footer.html", size: 267, mode: os.FileMode(420), modTime: time.Unix(1742730289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x41\x6a\xc4\x30\x0c\x05\xd0\x7d\x4f\x21\xb4\x17\xd9\xb7\x8e\xef\xa2\x49\x64\x47\xa9\x62\x0d\xb6\x63\x98\xdb\x97\x52\x3a\x84\x42\x61\x96\x12\xff\xff\x17\x56\x1d\xb0\x18\xb7\x36\xe3\xcd\xfd\x93\x36\xe1\x55\x2a\x82\xae\x7f\x1e\xd5\x4d\x66\x2c\x3c\x34\x73\x57\x2f\x18\xdf\x00\x00\x02\x3f\xeb\xbd\xc0\xfd\x34\x23\x93\xd4\x61\x6f\xd4\xdd\xed\xc6\x95\x78\xf9\xce\x43\xf7\x9c\x4d\xa8\x9d\xc7\xc1\xf5\x81\xb0\x55\x49\x33\xee\x3c\xb8\x2d\x55\xef\xfd\xfd\x03\x63\xd0\xdf\xb5\xc4\x90\x98\xd8\x34\x17\xda\xcf\xd6\x35\x3d\x30\x86\x49\x63\x98\xf8\x5f\xb9\x6a\xde\x7e\xe8\x4d\x0e\x79\xc2\x97\xe3\x35\xb6\x9d\x85\xfc\xc2\x85\x69\xd5\x11\xbf\x02\x00\x00\xff\xff\x39\xdf\x3f\x2c\x2c\x01\x00\x00")

func layoutsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsHeaderHtml,
		"layouts/header.html",
	)
}

func layoutsHeaderHtml() (*asset, error) {
	bytes, err := layoutsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/header.html", size: 300, mode: os.FileMode(420), modTime: time.Unix(1742730289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x51\x6f\xdb\xba\x0e\x7e\x4e\x81\xfe\x07\xcd\xf7\xa1\x09\x50\xd9\xeb\x9e\x2e\xd6\x38\xc3\xd6\xee\x0e\x05\x86\xed\x62\xeb\x80\x73\x30\x14\x07\x8c\xcc\xd8\x4a\x65\xc9\x93\x94\x64\x99\x97\xff\x7e\x20\xc9\x8a\x9d\xb5\xdd\x59\xcf\x9e\x22\x89\xe4\x47\xea\xa3\x48\x3a\xd3\x27\x97\xef\x2f\xae\xff\xfc\xff\x6b\x52\xd9\x5a\xcc\x8e\x8f\xa6\xee\x97\x08\x90\x65\x9e\x7c\xab\x28\x93\x89\x3f\x44\x28\x66\xc7\x47\xa3\x69\x8d\x16\x08\xab\x40\x1b\xb4\x79\xf2\xe9\xfa\x7f\xf4\xbf\x49\x2f\xa8\xac\x6d\x28\x7e\x59\xf1\x75\x9e\xfc\x41\x3f\xbd\xa4\x17\xaa\x6e\xc0\xf2\xb9\xc0\x84\x30\x25\x2d\x4a\x9b\x27\x57\xaf\x73\x2c\x4a\x1c\xd8\x49\xa8\x31\x4f\xd6\x1c\x37\x8d\xd2\x76\xa0\xba\xe1\x85\xad\xf2\x02\xd7\x9c\x21\xf5\x9b\x53\xc2\x25\xb7\x1c\x04\x35\x0c\x04\xe6\x67\xe9\xd3\x00\x64\xb9\x15\x38\x6b\x5b\x92\x5e\xbb\x15\xd9\xed\xa6\x59\x38\x3b\x3e\x72\x72\xc1\xe5\x2d\xd1\x28\xf2\xc4\xd8\xad\x40\x53\x21\xda\x84\xf0\x22\x4f\x6c\x85\x35\x52\x66\x4c\x42\x2a\x8d\x8b\x3c\xc9\x8c\x05\xcb\x59\xc6\x8c\xc9\x4a\x6e\xab\xd5\x9c\xd6\xa0\x6f\x0b\xb5\x91\x4e\x2d\x2b\x40\xdf\xa6\x4e\x7f\xf6\x30\xf0\xbd\x48\x73\xa5\x6e\xa9\x77\x97\x79\xdd\xdf\x05\xd9\xe0\xdc\x70\xfb\xdb\x30\xac\x82\xc6\xa2\xa6\x0b\x25\x8a\xdf\xbe\x57\x23\xb8\xb5\xa8\x1f\x8f\x53\xf1\xb2\x12\xbc\xac\x6c\x87\x04\x67\x67\x5b\xfa\xef\xa8\xde\x43\x2d\x0d\x65\xaa\xd9\xa6\x35\x97\x8f\x47\xa9\xa1\xb7\x3a\x3e\x1a\xb5\x2d\xe1\x0b\x92\xbe\xe1\x16\xc4\x6d\x7a\x21\x38\x4a\x7b\x75\x49\x76\xbb\x47\x92\x05\xe2\xb6\xfb\xd9\x87\xd4\xb6\x28\x0b\x07\xe4\xd7\xce\xcb\x4b\x09\x62\xfb\x0d\x75\xfa\x0a\x78\xb1\x0a\x3e\x9e\x50\x4a\xfc\x96\x80\x93\x5a\xce\x0c\xa1\xd4\x5f\xc9\x30\xcd\x1b\xeb\x96\xa3\x35\x68\xf2\x57\x55\x5b\x92\x87\x9f\xef\xdf\xc9\xe7\x9b\x73\x27\x19\x2f\x56\x92\x59\xae\xe4\x78\x42\x5a\x77\x40\x88\x53\xae\x6a\x92\x93\x42\xb1\x55\x8d\xd2\xa6\x4c\x23\x58\x7c\x2d\xd0\xed\xc6\x49\x00\x4e\x26\xe7\x41\xbf\xaa\x53\xa3\x19\xc9\x49\xe2\x4a\xdd\x3c\xcf\xb2\xaa\x4e\xe7\x2e\xa6\x94\xa9\xda\x6d\x96\xe6\x45\xdb\xde\x09\x3f\x39\xef\xfd\x99\xa1\xbb\x12\x6d\xe7\xcb\xbc\xda\x5e\x43\xf9\x0e\x6a\xec\xbd\x7e\x7e\x7a\xd3\x19\x9a\xb4\x01\x8d\xd2\xbe\x53\x05\xa6\x5c\x1a\xd4\xf6\x15\x2e\x94\xc6\x71\x55\x9f\x12\x13\xe2\xdb\x4d\xc6\x7e\x31\xcd\x7a\x3e\x7e\x42\xed\x1b\xa5\x4a\x81\x3d\xb7\x61\x4f\x2c\x94\x64\x5c\x5a\x28\xd3\xa5\x99\x1c\x12\x4c\xc0\x6c\x25\x23\x46\xb3\x7c\x4f\xc0\x66\xb3\x49\x4b\x6f\x69\xa1\xac\x41\x42\xe9\x1e\xbf\xaa\x33\x07\x91\x2d\xcd\x0b\x5e\xe4\x43\x46\xa2\xd7\x64\x36\x0c\x73\x98\xc1\x0d\x97\x85\xda\xa4\x05\x58\x78\x0b\x5b\xd4\x24\x27\x77\x8e\xfa\xac\xc6\xa4\x12\xe7\x6f\x3c\x69\xf7\x3a\x69\xb3\x32\xd5\x18\x74\xe9\x99\x36\x93\x73\x77\xd1\x91\xd7\x3a\x59\x9a\x93\x53\x22\x71\x43\x2e\xc1\xe2\x78\xe2\x58\xeb\x85\x4c\xc9\x05\x2f\x4f\x4e\xc9\xc9\x7d\x71\x9f\xfc\x8c\xe2\x69\xd6\x4d\x8a\xe9\x5c\x15\x5b\x7f\xb1\x82\xaf\x09\x13\x60\x4c\x9e\xb8\x36\x41\x16\x4a\x5a\x6a\xf8\x37\xa4\xcf\xc2\x7a\x01\x35\x17\x5b\x7a\x46\x98\x12\x4a\x87\xe2\xa7\xcf\x7c\x5d\xdc\xb1\xa6\x66\x55\xd7\xa0\xb7\x41\x3a\x9a\x32\x94\x16\x75\xd8\x8c\xa6\x4d\x54\x15\xaa\x54\x09\xd1\x4a\x60\xb7\x9e\x4d\xa1\x2b\xc6\xe4\x87\x11\x01\xb3\x69\xd6\x74\x68\xd9\x10\x6e\x2a\x61\xdd\x41\x48\x58\xf3\x12\x1c\xc9\x49\x74\xb5\x12\xd1\xd7\x61\x44\xa3\x51\xdb\x6a\x90\x25\x92\xf4\x1d\xac\xfd\xdb\x0a\x87\xc4\x62\xdd\x08\xb0\x48\x1c\x9c\x49\xdd\x98\x4d\x48\x3a\xd0\xe8\x48\xf4\xbb\xa9\xe0\x11\xbf\xe0\x6b\x5e\xa0\x76\xcf\x45\xf0\xe8\x3e\x5b\x89\x18\xb3\x84\x75\xa0\x2a\x2b\xf8\xfa\x7e\xd2\x5c\x2e\x22\x63\x07\xb2\x62\x4b\xb9\x94\x0e\x3c\xe0\xb6\x2d\xd1\x28\x0b\xd4\x24\x11\xb0\x55\x2b\x6b\x7c\x3e\x51\xc7\x70\x49\x8c\x70\x88\xd3\x40\x89\x74\xa3\xa1\x69\x50\x27\xc4\xc2\x9c\xcb\x02\xbf\xe6\x09\x3d\x8b\x39\x70\x9d\x74\x4f\xd0\x1d\xd3\x83\x10\x46\xa1\x16\x3f\x84\x30\x6c\x85\x84\xad\xb4\xab\xfc\x9e\xc0\x0a\x35\x76\x75\x19\xc9\xdd\x72\x14\xc5\x80\xcd\xe0\xc4\x0d\xf7\xd0\x69\x1d\x7b\x91\x1e\x2f\x8e\xcf\xe1\x3f\x9e\xa0\x70\xc9\x24\x46\xd5\xe7\x9b\x96\x8a\x5a\xd5\x24\xb3\xe9\x3e\x1f\x0b\x20\x0b\xa0\xa0\xb5\xda\xd0\x95\x93\x64\x7c\xe6\x9e\x51\xbc\xdd\xc0\xcf\x70\x7d\x0f\xb5\x0b\xa5\xec\x5d\x6a\x07\x79\x8c\xab\xb8\x98\x66\x5d\x55\xc5\x76\xe4\x1b\x51\x1c\x2f\xcb\xc1\xdc\xf3\x03\x6f\x69\x0e\x7a\xcc\x3f\x1a\x0d\x87\xe5\x2f\xda\x2e\xbf\xac\x50\x3f\xca\xe2\xe0\x5b\xe3\x17\x6d\xf6\xdf\x14\xbf\xa8\xef\x07\xf7\x0f\xba\x3f\x99\xde\x0f\xc1\x74\x43\xfa\xe1\xcb\xb9\xdc\x30\x25\x8d\x25\x41\x95\xe4\xbe\xa7\x06\x1f\x63\x3f\x62\x59\xe7\xe8\xb9\x6f\xa6\x3f\x78\xdf\xed\x4e\x4e\x7b\xa5\x8f\xc8\x34\xda\x7b\x14\x83\x20\x2a\x6b\x6c\xd4\x81\xd2\x07\x6c\x54\x14\xaa\x8d\x44\x7d\x20\x7d\xef\x4e\xa2\x18\x8a\x9a\xcb\xe7\xe4\xf3\x3d\xf2\x1b\xaf\xc0\x8b\x03\xe3\xab\x22\x5a\x0a\x98\xa3\x30\xce\x34\x5c\xf5\xe4\xe6\xf8\x68\xb4\x9b\xf8\xb1\xd1\xf1\x14\x9e\xf7\x38\x2a\x4c\xdc\x7b\x1d\xd0\x3f\x9c\x11\xe1\xaf\x86\x4f\x4a\x81\x0b\x2e\x0f\x9b\xa2\xcf\x49\xdf\x00\xbb\x17\x43\xdc\x30\x62\x96\xaf\xfd\xec\x74\x55\x11\x6b\xb8\x6d\xd3\xb7\x5c\xde\x76\xc7\xa3\xb6\x4d\x3f\x56\x6a\xe3\xbe\x24\x42\x49\x85\xb1\x7f\x65\x2e\xb9\xde\xed\xfa\x42\xc6\xaf\x8c\x5a\xcd\xcb\x12\x35\x59\x40\x28\xe4\xbe\x0b\x77\x25\x1d\x6c\x2f\x2a\x2e\x0a\x8d\x32\x48\xfa\xde\x0f\xda\x72\x26\xd0\x44\xc7\x5d\xe7\x3f\x50\x7f\xb8\xf7\x93\x28\xef\x7d\x86\xb6\xbe\x3f\xe9\x5a\xfe\x7e\xff\x77\x00\x00\x00\xff\xff\xc8\xed\x2d\x64\xae\x0d\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 3502, mode: os.FileMode(493), modTime: time.Unix(1742730289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"errors/404.html":     errors404Html,
	"errors/500.html":     errors500Html,
	"index.html":          indexHtml,
	"layouts/footer.html": layoutsFooterHtml,
	"layouts/header.html": layoutsHeaderHtml,
	"layouts/layout.html": layoutsLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"errors": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{layoutsFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{layoutsHeaderHtml, map[string]*bintree{}},
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
