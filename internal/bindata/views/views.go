// Code generated for package views by go-bindata DO NOT EDIT. (@generated)
// sources:
// web/views/errors/404.html
// web/views/errors/500.html
// web/views/index.html
// web/views/layouts/footer.html
// web/views/layouts/header.html
// web/views/layouts/layout.html
package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xcd\xe7\x79\x69\xa0\x87\x1d\xec\xc0\xe8\x5a\xd8\x65\xdb\xa1\x85\xed\xe8\xda\x3f\xb5\xc0\xb1\xb3\x54\x4d\xd9\xdb\x8f\x34\x1d\x74\x3b\x09\x7d\xfa\x3f\x81\x64\xee\x9e\xdf\x56\xdb\xcf\xf7\x35\x45\xe9\x52\x5b\x99\xa9\x50\x72\xf9\x60\x15\xb2\x9a\x00\x5c\x68\x2b\x22\x22\xd3\x41\x1c\xf9\xe8\x86\x23\xc4\xaa\xdd\x76\xa3\x1f\xd5\xed\x28\x8a\xf4\x1a\x5f\x27\x1e\xad\xfa\xd0\xbb\x27\xbd\x2a\x5d\xef\x84\xf7\x09\x8a\x7c\xc9\x82\x2c\x56\xbd\xac\x2d\xc2\x01\x7f\xcc\xec\x3a\x58\x35\x32\xce\x7d\x19\xe4\x26\x7c\xe6\x20\xd1\x06\x8c\xec\xa1\x2f\xcd\x3d\x71\x66\x61\x97\xf4\xd1\xbb\x04\xdb\x3c\x2c\x7e\x57\x09\x4b\x42\xbb\x5c\x2c\xe9\xb5\x08\x6d\xca\x29\x07\x53\xcf\xb0\x32\xf5\x7c\x88\xd9\x97\xf0\x7d\xcd\xc7\xa6\x35\x1e\x59\x30\xfc\x97\xae\xd4\xd4\xb1\x99\xd4\xd9\x31\xf5\xe5\x47\x3f\x01\x00\x00\xff\xff\xf0\x70\x71\x97\x33\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 307, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\x93\xf3\x42\xd9\x8d\x43\x52\x09\x8d\x21\x71\x1a\x87\x4d\x82\xa3\xd7\x5a\x8d\xa5\xd4\x29\xad\xb7\x6a\x6f\x8f\xba\x0c\x69\xdc\x38\x25\xbf\xfc\xf9\xb3\x6c\xff\xf0\xba\xdb\xec\xbf\x3e\xb6\x10\xb5\x4f\xb5\xf1\xcb\x03\x09\xa5\x0b\x96\xc4\xd6\xc6\xf8\x48\xd8\xd6\x06\x00\xc0\xf7\xa4\x08\x4d\xc4\x71\x22\x0d\xf6\xb0\x7f\x73\xcf\xf6\xbe\x14\x55\x07\x47\xdf\x27\x3e\x07\xfb\xe9\x0e\x2f\x6e\x93\xfb\x01\x95\x8f\x89\x2c\x34\x59\x94\x44\x83\x7d\xdf\x06\x6a\x3b\xfa\xd3\x29\xd8\x53\xb0\x67\xa6\x79\xc8\xa3\xde\xc1\x33\xb7\x1a\x43\x4b\x67\x6e\xc8\x5d\xc3\x0a\x58\x58\x19\x93\x9b\x1a\x4c\x14\xd6\x8f\x4f\xbf\x2a\x65\x4d\x54\xef\x4e\xc3\x04\x53\xee\x49\x23\x4b\x07\x33\x89\xc2\x3c\x66\xe9\x56\xa0\xe3\x05\xb0\x43\x16\x5f\x15\xd6\xf8\xaa\xec\x67\xfc\x31\xb7\x97\x9b\x27\xae\xcb\xe7\x1a\x1a\x12\xa5\xf1\x9f\xd6\x1b\x5c\x34\xd5\xe2\xf1\x55\x11\x2f\x93\x96\x13\xff\x04\x00\x00\xff\xff\x89\x94\x40\x58\x72\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 370, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\x2c\x2a\xc9\x4c\xce\x49\x55\x48\xce\x49\x2c\x2e\xb6\x55\xca\x4d\x2c\xca\x4e\xc9\x2f\xcf\xd3\x4d\xca\x4f\xa9\x54\xb2\xe3\x52\x50\x50\x50\xa8\xae\xd6\x73\x84\xa8\xaa\xad\xe5\xb2\xd1\x87\xea\xb0\x03\x04\x00\x00\xff\xff\x82\x8b\x94\x11\x3b\x00\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 59, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func layoutsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsFooterHtml,
		"layouts/footer.html",
	)
}

func layoutsFooterHtml() (*asset, error) {
	bytes, err := layoutsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/footer.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x41\x6a\xc4\x30\x0c\x05\xd0\x7d\x4f\x21\xb4\x17\xd9\xb7\x8e\xef\xa2\x49\x64\x47\xa9\x62\x0d\xb6\x63\x98\xdb\x97\x52\x3a\x84\x42\x61\x96\x12\xff\xff\x17\x56\x1d\xb0\x18\xb7\x36\xe3\xcd\xfd\x93\x36\xe1\x55\x2a\x82\xae\x7f\x1e\xd5\x4d\x66\x2c\x3c\x34\x73\x57\x2f\x18\xdf\x00\x00\x02\x3f\xeb\xbd\xc0\xfd\x34\x23\x93\xd4\x61\x6f\xd4\xdd\xed\xc6\x95\x78\xf9\xce\x43\xf7\x9c\x4d\xa8\x9d\xc7\xc1\xf5\x81\xb0\x55\x49\x33\xee\x3c\xb8\x2d\x55\xef\xfd\xfd\x03\x63\xd0\xdf\xb5\xc4\x90\x98\xd8\x34\x17\xda\xcf\xd6\x35\x3d\x30\x86\x49\x63\x98\xf8\x5f\xb9\x6a\xde\x7e\xe8\x4d\x0e\x79\xc2\x97\xe3\x35\xb6\x9d\x85\xfc\xc2\x85\x69\xd5\x11\xbf\x02\x00\x00\xff\xff\x39\xdf\x3f\x2c\x2c\x01\x00\x00")

func layoutsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsHeaderHtml,
		"layouts/header.html",
	)
}

func layoutsHeaderHtml() (*asset, error) {
	bytes, err := layoutsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/header.html", size: 300, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x6d\x6f\xdb\x38\x12\xfe\xec\x00\xf9\x0f\x53\x1e\xb0\xb1\x81\x48\xda\xec\xa7\x43\x23\x79\xd1\xa6\xbd\x45\x81\x45\xf7\xae\xdb\x05\xee\x50\x14\x87\x89\x34\x96\x18\x53\xa4\x96\xa4\xad\xb8\x5a\xff\xf7\x03\x5f\x64\xd9\x4d\x52\xb4\xd7\x4f\x26\x39\xaf\x7c\x86\x33\x8f\x9c\x3f\x7b\xf5\xdb\xcd\xfb\xff\xfc\xf3\x35\x34\xb6\x15\xcb\xf3\xb3\xdc\xfd\x82\x40\x59\x17\x8c\x24\xf3\x27\x84\xd5\xf2\xfc\x6c\x96\xb7\x64\x11\xca\x06\xb5\x21\x5b\xb0\x3f\xde\xff\x23\xf9\x3b\x9b\x04\x8d\xb5\x5d\x42\x7f\x6e\xf8\xb6\x60\xff\x4e\xfe\x78\x91\xdc\xa8\xb6\x43\xcb\x6f\x05\x31\x28\x95\xb4\x24\x6d\xc1\xde\xbc\x2e\xa8\xaa\xe9\xc8\x4e\x62\x4b\x05\xdb\x72\xea\x3b\xa5\xed\x91\x6a\xcf\x2b\xdb\x14\x15\x6d\x79\x49\x89\xdf\x5c\x02\x97\xdc\x72\x14\x89\x29\x51\x50\x71\x95\xfe\x18\x1c\x59\x6e\x05\x2d\x87\x01\xd2\xf7\x6e\x05\xfb\x7d\x9e\x85\xb3\xf3\x33\x27\x17\x5c\xae\x41\x93\x28\x98\xb1\x3b\x41\xa6\x21\xb2\x0c\x78\x55\x30\xdb\x50\x4b\x49\x69\x0c\x83\x46\xd3\xaa\x60\x99\xb1\x68\x79\x99\x95\xc6\x64\x35\xb7\xcd\xe6\x36\x69\x51\xaf\x2b\xd5\x4b\xa7\x96\x55\xa8\xd7\xa9\xd3\x5f\x3e\xed\xf8\x51\x4f\xb7\x4a\xad\x13\x1f\x2e\xf3\xba\xdf\xeb\xa4\xa7\x5b\xc3\xed\x77\xbb\x29\x1b\xec\x2c\xe9\x64\xa5\x44\xf5\xdd\xf7\xea\x04\xb7\x96\xf4\xb7\xfb\x69\x78\xdd\x08\x5e\x37\x36\x7a\xc2\xab\xab\x5d\xf2\xff\x41\xdd\x22\x97\xa3\xd5\xf9\xd9\x6c\x18\x80\xaf\x20\xfd\x85\x5b\x14\xeb\xf4\x46\x70\x92\xf6\xcd\x2b\xd8\xef\xbf\xf1\x9a\x28\xd6\xf1\xe7\x90\xd2\x30\x90\xac\x9c\x23\xbf\x76\x51\x5e\x48\x14\xbb\x4f\xa4\xd3\x97\xc8\xab\x4d\x88\xf1\x2c\x49\xc0\x6f\x01\x9d\xd4\xf2\xd2\x40\x92\xf8\x2b\x99\x52\xf3\xce\xba\xe5\x6c\x8b\x1a\xfe\xdb\xb4\x16\x8a\xf0\xf3\xd7\x5f\xf0\xe1\xe3\xb5\x93\xcc\x57\x1b\x59\x5a\xae\xe4\x7c\x01\x83\x3b\x00\x70\xca\x4d\x0b\x05\x54\xaa\xdc\xb4\x24\x6d\x5a\x6a\x42\x4b\xaf\x05\xb9\xdd\x9c\x05\xc7\x6c\x71\x1d\xf4\x9b\x36\x35\xba\x84\x02\x98\x6b\x52\xf3\x3c\xcb\x9a\x36\xbd\x75\x39\xa5\xa5\x6a\xdd\xe6\xce\xfc\x3c\x0c\x0f\xd2\x67\xd7\x53\x3c\x73\x1c\xae\x26\x1b\x63\x99\x97\xbb\xf7\x58\xbf\xc5\x96\xa6\xa8\x1f\x7e\xfc\x18\x0d\x4d\xda\xa1\x26\x69\xdf\xaa\x8a\x52\x2e\x0d\x69\xfb\x92\x56\x4a\xd3\xbc\x69\x2f\xc1\x84\xfc\xf6\x8b\xb9\x5f\xe4\xd9\x84\xc7\x17\xa0\xfd\x45\xa9\x5a\xd0\x84\x6d\xd8\x83\xc5\x1a\xe6\xb5\xc5\x3a\xbd\x33\x8b\x53\x80\x01\xcd\x4e\x96\x60\x74\x59\x1c\x00\xe8\xfb\x3e\xad\xbd\xa5\xc5\xba\x45\x89\xb5\x7b\xb6\xaa\xcd\x9c\x8b\xec\xce\xfc\xcc\xab\xe2\x18\x91\x31\x2a\x5b\x1e\xa7\x79\x5c\xc1\x9e\xcb\x4a\xf5\x69\x85\x16\x7f\xc5\x1d\x69\x28\xe0\xc1\xd1\x54\xd5\xb1\xa8\xe0\xe2\xcd\x17\xc3\x41\x27\xed\x36\xa6\x99\xa3\xae\x3d\xd2\x66\x71\xed\x2e\x3a\xf3\x5a\x17\x77\xe6\xe2\x12\x24\xf5\xf0\x0a\x2d\xcd\x17\x0e\xb5\x49\x58\x2a\xb9\xe2\xf5\xc5\x25\x5c\x3c\x96\xf7\xc5\x97\x20\xce\xb3\x38\xe3\xf3\x5b\x55\xed\xfc\xc5\x2a\xbe\x85\x52\xa0\x31\x05\x73\x0d\x0e\x2b\x25\x6d\x62\xf8\x27\x4a\x7e\x0a\xeb\x15\xb6\x5c\xec\x92\x2b\x28\x95\x50\x3a\xb4\x6d\xf2\x93\xef\x8b\x07\xd6\x89\xd9\xb4\x2d\xea\x5d\x90\xce\xf2\x92\xa4\x25\x1d\x36\xb3\xbc\x1b\x55\x85\xaa\x15\x03\xad\x04\xc5\xf5\x32\xc7\xd8\x8c\xec\xb3\xe1\x8e\xcb\x3c\xeb\xa2\xb7\xec\xd8\x5d\x2e\x71\x1b\x5d\x48\xdc\xf2\x1a\x1d\xc8\x6c\x0c\xb5\x11\x63\xac\xd3\x8c\x66\xb3\x61\xd0\x28\x6b\x82\xf4\x2d\x6e\xfd\xdb\x0a\x87\x60\xa9\xed\x04\x5a\x02\xe7\xce\xa4\x8e\x1d\x19\xa4\x47\x1a\x11\x44\xbf\xcb\x05\x1f\xfd\x57\x7c\xcb\x2b\xd2\xee\xb9\x08\x3e\x86\xcf\x36\x62\xcc\x59\xe2\x36\x40\x95\x55\x7c\xfb\x38\x68\xae\x16\x23\x62\x27\xb2\x6a\x97\x70\x29\x9d\xf3\xe0\x77\x18\x40\x93\xac\x48\x03\x13\xb8\x53\x1b\x6b\x7c\x3d\x49\xc7\x74\xc7\xfc\x8e\xbd\x74\x58\x53\xd2\x6b\xec\x3a\xd2\x0c\x2c\xde\x72\x59\xd1\x7d\xc1\x92\xab\xb1\x02\x6e\x8e\x1e\xe0\x79\x60\x7a\x92\xc0\x2c\x74\xe2\xbb\x90\x84\x6d\x08\xca\x8d\x76\x7d\x3f\xc1\xd7\x90\xa6\xd8\x95\x23\xb4\x3b\x4e\xa2\x3a\x24\x17\x63\x38\x4e\x0e\x63\xd6\x41\x37\x62\xe3\xc5\xe3\x5b\xf8\x9b\x47\x27\xdc\x90\x8d\x49\x4d\xc5\x4e\x6a\x95\x58\xd5\xb1\x65\x7e\x28\xc6\x0a\x61\x85\x09\x6a\xad\xfa\x64\xe3\x24\x19\x5f\xba\x37\x34\x5e\xee\x28\xce\xd1\xfa\xa8\x34\xd3\x6a\xa5\x94\x7b\x6b\x8f\x40\x1e\x24\x07\xc8\xf3\x78\xe0\xbb\x29\xda\xe7\x59\xec\xaf\x71\x30\xf9\x91\x34\x12\xcd\xdd\x11\x0d\xa6\x77\xe6\x64\xd2\x3c\x65\x70\xf7\xaf\x0d\xe9\xdd\xd7\x6a\x9f\x70\xfd\x57\xda\x1c\x38\xfd\x2b\xf5\x3d\xfd\x7e\xa6\xfb\x05\x0e\x7e\xca\x4d\xa4\xda\xf6\xa1\xb3\xa7\x2c\xf0\x0e\xef\x1b\xa5\xbe\x64\xe3\x6a\x81\x4d\xda\x69\x75\xbf\x9b\x7b\x2e\x55\xf2\x1d\xfd\xb9\x21\x63\x9f\xc3\x3c\x0c\xd0\xcb\x06\x65\x25\x48\x2f\xa0\x58\x06\xbe\x9d\x09\xb2\x80\x1d\x87\xc2\x8f\xd6\x78\x8b\x17\x1d\xdf\xef\x2f\xae\x0f\x0a\xa5\xd2\xe6\x54\xe3\x46\x69\x73\x50\xe1\xab\xb9\x73\xf1\xac\x80\x8d\xac\x68\xc5\x25\x55\xf0\xc3\x0f\x10\xcf\x18\x8b\xdc\x3e\x9b\x85\x2c\xd2\x8d\x16\x50\xc0\xb4\x49\x35\x75\x02\x4b\x9a\x33\xec\x78\x1a\x3e\x4c\x1d\x5f\xb1\x4b\xe7\x23\x10\xe9\x6c\x3f\x86\xf2\xc9\x7c\x1e\x6b\x3c\xfc\x96\x60\xce\x26\x41\xb9\xeb\x5d\xff\xa6\xf8\xa9\x4d\x7b\xa5\xd7\xa4\x4d\x5a\xd1\x96\x5d\x7a\x9f\x27\xc1\x23\x7a\xa9\xa4\x7b\x1b\x11\x8d\x2c\x7f\x7e\x36\xdb\xbb\xe5\xe3\x65\x29\x95\x34\x16\x42\xd5\xa1\xf0\x24\x17\x60\x0c\x75\x2a\xe3\x9b\x79\x7e\x02\x70\x3c\xdc\xef\x2f\x2e\x27\xa5\xdf\xa9\xd4\x64\x1f\x51\x0c\x82\x51\x59\x53\xa7\x4e\x94\xde\x51\xa7\x46\xa1\xea\x25\xe9\x13\xe9\x6f\xee\x64\x14\x63\xd5\x72\xf9\x1c\x3e\x3c\x22\xff\xe8\x15\x78\x75\x62\xfc\xa6\x1a\x2d\x05\xde\x92\x30\xce\x34\x5c\xf5\xe2\xa3\x87\xc5\xf3\x78\x7c\xf2\x61\xae\xcc\x47\x85\xc5\x09\x62\x07\xbe\xc9\xb3\xf8\x87\xcd\x77\x57\xa8\xf2\x09\x47\x79\xa5\x89\x8f\x62\xeb\x83\xfb\x36\x28\x2d\xdf\xfa\x4f\x19\x37\x9a\xc6\xa9\x3a\x0c\xe9\xaf\x5c\xae\xe3\xf1\x6c\x18\xd2\xdf\x1b\xd5\xbb\x0f\xbb\x30\xa1\xc3\x57\xd8\x1b\xf3\x8a\xeb\xfd\x7e\x1a\xad\x74\x5f\x26\x56\xf3\xba\x26\x0d\x2b\x0c\xa3\x75\x22\xc5\x38\x64\x83\xed\x4d\xc3\x45\xa5\x49\x06\xc9\x44\xc5\xa8\x2d\x2f\x05\x99\x31\x70\x24\xe2\x13\xf5\xa7\xa9\x18\x46\xf9\x14\x33\xb0\xec\x11\x54\x9e\x81\xe3\xfe\x7f\x01\x00\x00\xff\xff\x8c\x18\x3e\x4d\xf2\x0e\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 3826, mode: os.FileMode(493), modTime: time.Unix(1670560691, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"errors/404.html":     errors404Html,
	"errors/500.html":     errors500Html,
	"index.html":          indexHtml,
	"layouts/footer.html": layoutsFooterHtml,
	"layouts/header.html": layoutsHeaderHtml,
	"layouts/layout.html": layoutsLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"errors": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{layoutsFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{layoutsHeaderHtml, map[string]*bintree{}},
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
