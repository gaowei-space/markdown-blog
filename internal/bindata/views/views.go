// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package views generated by go-bindata.// sources:
// web/views/errors/404.html
// web/views/errors/500.html
// web/views/index.html
// web/views/layouts/footer.html
// web/views/layouts/header.html
// web/views/layouts/layout.html
package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xcd\xe7\x79\x69\xa0\x87\x1d\xec\xc0\xe8\x5a\xd8\x65\xdb\xa1\x85\xed\xe8\xda\x3f\xb5\xc0\xb1\xb3\x54\x4d\xd9\xdb\x8f\x34\x1d\x74\x3b\x09\x7d\xfa\x3f\x81\x64\xee\x9e\xdf\x56\xdb\xcf\xf7\x35\x45\xe9\x52\x5b\x99\xa9\x50\x72\xf9\x60\x15\xb2\x9a\x00\x5c\x68\x2b\x22\x22\xd3\x41\x1c\xf9\xe8\x86\x23\xc4\xaa\xdd\x76\xa3\x1f\xd5\xed\x28\x8a\xf4\x1a\x5f\x27\x1e\xad\xfa\xd0\xbb\x27\xbd\x2a\x5d\xef\x84\xf7\x09\x8a\x7c\xc9\x82\x2c\x56\xbd\xac\x2d\xc2\x01\x7f\xcc\xec\x3a\x58\x35\x32\xce\x7d\x19\xe4\x26\x7c\xe6\x20\xd1\x06\x8c\xec\xa1\x2f\xcd\x3d\x71\x66\x61\x97\xf4\xd1\xbb\x04\xdb\x3c\x2c\x7e\x57\x09\x4b\x42\xbb\x5c\x2c\xe9\xb5\x08\x6d\xca\x29\x07\x53\xcf\xb0\x32\xf5\x7c\x88\xd9\x97\xf0\x7d\xcd\xc7\xa6\x35\x1e\x59\x30\xfc\x97\xae\xd4\xd4\xb1\x99\xd4\xd9\x31\xf5\xe5\x47\x3f\x01\x00\x00\xff\xff\xf0\x70\x71\x97\x33\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 307, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\x93\xf3\x42\xd9\x8d\x43\x52\x09\x8d\x21\x71\x1a\x87\x4d\x82\xa3\xd7\x5a\x8d\xa5\xd4\x29\xad\xb7\x6a\x6f\x8f\xba\x0c\x69\xdc\x38\x25\xbf\xfc\xf9\xb3\x6c\xff\xf0\xba\xdb\xec\xbf\x3e\xb6\x10\xb5\x4f\xb5\xf1\xcb\x03\x09\xa5\x0b\x96\xc4\xd6\xc6\xf8\x48\xd8\xd6\x06\x00\xc0\xf7\xa4\x08\x4d\xc4\x71\x22\x0d\xf6\xb0\x7f\x73\xcf\xf6\xbe\x14\x55\x07\x47\xdf\x27\x3e\x07\xfb\xe9\x0e\x2f\x6e\x93\xfb\x01\x95\x8f\x89\x2c\x34\x59\x94\x44\x83\x7d\xdf\x06\x6a\x3b\xfa\xd3\x29\xd8\x53\xb0\x67\xa6\x79\xc8\xa3\xde\xc1\x33\xb7\x1a\x43\x4b\x67\x6e\xc8\x5d\xc3\x0a\x58\x58\x19\x93\x9b\x1a\x4c\x14\xd6\x8f\x4f\xbf\x2a\x65\x4d\x54\xef\x4e\xc3\x04\x53\xee\x49\x23\x4b\x07\x33\x89\xc2\x3c\x66\xe9\x56\xa0\xe3\x05\xb0\x43\x16\x5f\x15\xd6\xf8\xaa\xec\x67\xfc\x31\xb7\x97\x9b\x27\xae\xcb\xe7\x1a\x1a\x12\xa5\xf1\x9f\xd6\x1b\x5c\x34\xd5\xe2\xf1\x55\x11\x2f\x93\x96\x13\xff\x04\x00\x00\xff\xff\x89\x94\x40\x58\x72\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 370, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\x2c\x2a\xc9\x4c\xce\x49\x55\x48\xce\x49\x2c\x2e\xb6\x55\xca\x4d\x2c\xca\x4e\xc9\x2f\xcf\xd3\x4d\xca\x4f\xa9\x54\xb2\xe3\x52\x50\x50\x50\xa8\xae\xd6\x73\x84\xa8\xaa\xad\xe5\xb2\xd1\x87\xea\xb0\x03\x04\x00\x00\xff\xff\x82\x8b\x94\x11\x3b\x00\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 59, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func layoutsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsFooterHtml,
		"layouts/footer.html",
	)
}

func layoutsFooterHtml() (*asset, error) {
	bytes, err := layoutsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/footer.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x41\x6a\xc4\x30\x0c\x05\xd0\x7d\x4f\x21\xb4\x17\xd9\xb7\x8e\xef\xa2\x49\x64\x47\xa9\x62\x0d\xb6\x63\x98\xdb\x97\x52\x3a\x84\x42\x61\x96\x12\xff\xff\x17\x56\x1d\xb0\x18\xb7\x36\xe3\xcd\xfd\x93\x36\xe1\x55\x2a\x82\xae\x7f\x1e\xd5\x4d\x66\x2c\x3c\x34\x73\x57\x2f\x18\xdf\x00\x00\x02\x3f\xeb\xbd\xc0\xfd\x34\x23\x93\xd4\x61\x6f\xd4\xdd\xed\xc6\x95\x78\xf9\xce\x43\xf7\x9c\x4d\xa8\x9d\xc7\xc1\xf5\x81\xb0\x55\x49\x33\xee\x3c\xb8\x2d\x55\xef\xfd\xfd\x03\x63\xd0\xdf\xb5\xc4\x90\x98\xd8\x34\x17\xda\xcf\xd6\x35\x3d\x30\x86\x49\x63\x98\xf8\x5f\xb9\x6a\xde\x7e\xe8\x4d\x0e\x79\xc2\x97\xe3\x35\xb6\x9d\x85\xfc\xc2\x85\x69\xd5\x11\xbf\x02\x00\x00\xff\xff\x39\xdf\x3f\x2c\x2c\x01\x00\x00")

func layoutsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsHeaderHtml,
		"layouts/header.html",
	)
}

func layoutsHeaderHtml() (*asset, error) {
	bytes, err := layoutsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/header.html", size: 300, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x6d\x6f\xdb\x38\x12\xfe\xac\x00\xf9\x0f\x2c\x0f\xd8\xd8\x40\x24\x35\x29\x7a\xbd\x6b\x2c\x2f\xda\xb4\xb7\x28\xb0\xe8\xde\x75\xbb\xc0\x1d\x8a\xe2\x30\x16\xc7\x12\x1d\x8a\xd4\x92\x94\x1d\x55\xf5\x7f\x3f\xf0\x45\x7e\x69\x92\xa2\xbd\x7e\x32\xc9\x79\xe5\x33\x9c\x79\xe4\xd9\xa3\x57\xbf\x5d\xbf\xff\xcf\x3f\x5f\x93\xda\x36\x62\x7e\x7a\x32\x73\xbf\x44\x80\xac\x0a\x8a\x92\xfa\x13\x04\x36\x3f\x3d\x49\x66\x0d\x5a\x20\x65\x0d\xda\xa0\x2d\xe8\x1f\xef\xff\x91\xfe\x8d\xee\x05\xb5\xb5\x6d\x8a\x7f\x76\x7c\x5d\xd0\x7f\xa7\x7f\xbc\x48\xaf\x55\xd3\x82\xe5\x0b\x81\x94\x94\x4a\x5a\x94\xb6\xa0\x6f\x5e\x17\xc8\x2a\x3c\xb0\x93\xd0\x60\x41\xd7\x1c\x37\xad\xd2\xf6\x40\x75\xc3\x99\xad\x0b\x86\x6b\x5e\x62\xea\x37\xe7\x84\x4b\x6e\x39\x88\xd4\x94\x20\xb0\xb8\xc8\x1e\x07\x47\x96\x5b\x81\xf3\x61\x20\xd9\x7b\xb7\x22\xdb\xed\x2c\x0f\x67\x4e\x6a\x4a\xcd\x5b\x4b\xc0\xf4\xb2\x24\x46\x97\x05\x75\xb9\x9a\xe7\x79\xde\x42\x85\xc0\x2e\xb3\x4a\xa9\x4a\xa0\xe9\x25\xe3\x25\x58\xae\x64\x56\xaa\x26\x4a\xf3\x95\xc9\x81\x99\x45\x1f\x94\xb2\x95\xf9\xb9\x14\xdc\x65\x58\x42\xda\x76\x8b\xf4\xf2\xd9\xd3\x27\x4f\x9e\xfd\xfd\xd9\xd3\xbf\x5e\x5c\x3e\xbe\x7c\xf2\x94\x9e\x9e\x24\x49\x52\x6a\x65\x8c\xd2\xbc\xe2\xb2\xa0\x20\x95\xec\x1b\xd5\x19\x3a\x9f\xe5\x21\x9d\xf9\xe9\x89\xcb\x4d\x70\x79\x43\x34\x8a\x82\x1a\xdb\x0b\x34\x35\xa2\xa5\x84\xb3\x82\xda\x1a\x1b\x4c\x4b\x63\x28\xa9\x35\x2e\x0b\x9a\x1b\x0b\x96\x97\x79\x69\x4c\x5e\x71\x5b\x77\x8b\xb4\x01\x7d\xc3\xd4\x46\x3a\xb5\x9c\x81\xbe\xc9\x9c\xfe\xfc\x61\xc7\xf7\x7a\x5a\x28\x75\x93\xfa\x70\xb9\xd7\xfd\x51\x27\x1b\x5c\x18\x6e\x7f\xd8\x4d\x59\x43\x6b\x51\xa7\x4b\x25\xd8\x0f\xdf\xab\x15\xdc\x5a\xd4\xdf\xef\xa7\xe6\x55\x2d\x78\x55\xdb\xe8\x09\x2e\x2e\xfa\xf4\xff\x83\xba\x01\x2e\x47\xab\xd3\x93\x64\x18\x08\x5f\x92\xec\x17\x6e\x41\xdc\x64\xd7\xfe\x4d\xbd\x79\x45\xb6\xdb\xef\xbc\x26\x88\x9b\xf8\xb3\x4b\x69\x18\x50\x32\xe7\xc8\xaf\x5d\x94\x17\x12\x44\xff\x09\x75\xf6\x12\x38\xeb\x42\x8c\x47\x69\x4a\xfc\x96\x80\x93\x5a\x5e\x1a\x92\xa6\x07\x2d\xe3\x96\xc9\x1a\x34\xf9\x6f\xdd\x58\x52\x84\x9f\xcf\x9f\xc9\x87\x8f\x57\x4e\x32\x59\x76\xb2\x74\xdd\x32\x99\x92\xc1\x1d\x10\xe2\x94\xeb\x86\x14\x84\xa9\xb2\x6b\x50\xda\xac\xd4\x08\x16\x5f\x0b\x74\xbb\x09\x0d\x8e\xe9\xf4\x2a\xe8\xd7\x4d\x66\x74\x49\x0a\xb2\x6b\xc9\xba\xc9\x16\x2e\x27\xdf\x81\x75\xe3\xda\x6d\x18\xee\xa4\x4f\xaf\xf6\xf1\xcc\x61\xb8\x0a\x6d\x8c\x65\x5e\xf6\xef\xa1\x7a\x0b\x0d\xee\xa3\x7e\x78\xfc\x31\x1a\x9a\xac\x05\x8d\xd2\xbe\x55\x0c\x33\x2e\x0d\x6a\xfb\x12\x97\x4a\xe3\xa4\x6e\xce\x89\x09\xf9\x6d\xa7\x13\xbf\x38\xe8\xd9\xaf\x41\xfb\x8b\x1f\x10\x7b\x6c\xc3\x9e\x58\xa8\xc8\xa4\xb2\x50\x65\x2b\x33\x3d\x06\xf8\xbe\x99\xb4\xd9\x6c\xe2\x3c\xb2\x50\x35\x20\xa1\x72\xcf\x56\x35\xb9\x73\x91\xaf\xcc\xcf\x9c\x15\x87\x88\x8c\x51\x8f\x46\xcb\x51\x05\x37\x5c\x32\xb5\xc9\x18\x58\xf8\x15\x7a\xd4\xa4\x20\x77\x8e\xf6\x55\x1d\x8b\x4a\x5c\xbc\xc9\x74\xd8\xe9\x64\x6d\x67\xea\x09\xe8\xca\x23\x6d\xa6\x57\xee\xa2\x89\xd7\x3a\x5b\x99\xb3\x73\x22\x71\x43\x5e\x81\xc5\xc9\xd4\xa1\xb6\x17\x96\x4a\x2e\x79\x75\x76\x4e\xce\xee\xcb\xfb\xec\x6b\x10\xcf\xf2\xc8\x3e\xb3\x85\x62\xbd\xbf\x18\xe3\x6b\x52\x0a\x30\xa6\xa0\xae\xc1\xc9\x52\x49\x9b\x1a\xfe\x09\xd3\xcb\xb0\x5e\x42\xc3\x45\x9f\x5e\x90\x52\x09\xa5\x43\xdb\xa6\x97\xbe\x2f\xee\x58\xa7\xa6\x6b\x1a\xd0\x7d\x90\x26\xb3\x12\xa5\x45\x1d\x36\xc9\xac\x1d\x55\x85\xaa\x14\x25\x5a\x09\x8c\xeb\xf9\x0c\x62\x33\xd2\x2f\x68\x07\xe6\xb3\xbc\x8d\xde\xf2\x43\x77\x33\x09\xeb\xe8\x42\xc2\x9a\x57\x9e\x67\xe8\x18\xaa\x13\x63\xac\xe3\x8c\x92\x64\x18\x34\xc8\x0a\x49\xf6\x16\xd6\xfe\x6d\x85\x43\x62\xb1\x69\x05\x58\x24\xce\x9d\xc9\x1c\x6f\x53\x92\x1d\x68\x44\x10\xfd\x6e\x26\xf8\xe8\x9f\xf1\x35\x67\xa8\xdd\x73\x11\x7c\x0c\x9f\x77\x62\xcc\x59\xc2\x3a\x40\x95\x33\xbe\xbe\x1f\x34\x57\x8b\x11\xb1\x23\x19\xeb\x53\x2e\xa5\x73\x1e\xfc\x0e\x03\xd1\x28\x19\x6a\x42\x05\xf4\xaa\xb3\xc6\xd7\x13\x75\x4c\x77\xcc\xef\xd0\x8b\x63\xdd\x74\xa3\xa1\x6d\x51\x53\x62\x61\xc1\x25\xc3\xdb\x82\xa6\x17\x63\x05\xdc\x1c\xdd\xc1\x73\xc7\xf4\x28\x81\x24\x74\xe2\xbb\x90\x84\xad\x91\x94\x9d\x76\x7d\xbf\x87\xaf\x46\x8d\xb1\x2b\x47\x68\x7b\x8e\x82\xed\x92\x8b\x31\x1c\x27\x87\x31\xeb\xa0\x1b\xb1\xf1\xe2\xf1\x2d\xfc\xc5\xa3\x13\x6e\x48\xc7\xa4\xf6\xc5\x4e\x2b\x95\x5a\xd5\xd2\xf9\x6c\x57\x8c\x25\x90\x25\xa4\xa0\xb5\xda\xa4\x9d\x93\xe4\x7c\xee\xde\xd0\x78\xb9\x83\x38\x07\xeb\x83\xd2\xec\x57\x4b\xa5\xdc\x5b\xbb\x07\xf2\x20\xd9\x41\x3e\x8b\x07\xbe\x9b\xa2\xfd\x2c\x8f\xfd\x35\x0e\x26\x3f\x92\x46\xa2\x59\x1d\xd0\x60\xb6\x3a\xfe\x88\x79\xc8\x60\xf5\xaf\x0e\x75\xff\xad\xda\x47\x5c\xff\x8d\x36\x3b\x4e\xff\x46\x7d\x4f\xbf\x5f\xe8\x7e\x85\x83\x1f\x72\x13\xa9\xb6\xb9\xeb\xec\x21\x0b\x58\xc1\x6d\xad\xd4\xd7\x6c\x5c\x2d\xa0\xce\x5a\xad\x6e\xfb\x89\xe7\x52\x25\xdf\xe1\x9f\x1d\x1a\xfb\x9c\x4c\xc2\x00\x3d\xaf\x41\x32\x81\x7a\x4a\x8a\x79\xe0\xdb\x44\xa0\x25\xd0\x72\x52\xf8\xd1\x1a\x6f\xf1\xa2\xe5\xdb\xed\xd9\xd5\x4e\xa1\x54\xda\x1c\x6b\x5c\x2b\x6d\x76\x2a\x7c\x39\x71\x2e\x1e\x15\xa4\x93\x0c\x97\x5c\x22\x23\x3f\xfd\x44\xe2\x19\xa5\x91\xdb\x93\x24\x64\x91\x75\x5a\x90\x82\xec\x37\x99\xc6\x56\x40\x89\x13\x0a\x2d\xcf\xc2\x87\xa9\xe3\x2b\x7a\xee\x7c\x04\x22\x4d\xb6\x63\x28\x9f\xcc\x97\xb1\xc6\xc3\xef\x09\xe6\x6c\x52\x90\xfd\xc6\xf5\x6f\x06\x9f\x9a\x6c\xa3\xf4\x0d\x6a\x93\x31\x5c\xd3\x73\xef\xf3\x28\x78\x44\x2f\x93\x78\x6b\x23\xa2\x91\xe5\x4f\x4f\x92\xad\x5b\xde\x5f\x96\x52\x49\x63\x49\xa8\x3a\x29\x3c\xc9\x05\x18\x43\x9d\xca\xf8\x66\x9e\x1f\x01\x1c\x0f\xb7\xdb\xb3\xf3\xbd\xd2\xef\x58\x6a\xb4\xf7\x28\x06\xc1\xa8\xac\xb1\x55\x47\x4a\xef\xb0\x55\xa3\x50\x6d\x24\xea\x23\xe9\x6f\xee\x64\x14\x03\x6b\xb8\x7c\x4e\x3e\xdc\x23\xff\xe8\x15\x38\x3b\x32\x7e\xc3\x46\x4b\x01\x0b\x14\xc6\x99\x86\xab\x9e\x7d\xf4\xb0\x78\x1e\x8f\x4f\x3e\xcc\x95\xc9\xa8\x30\x3d\x42\x6c\xc7\x37\xb3\x3c\xfe\x95\xf4\xdd\x15\xaa\x7c\xc4\x51\x5e\x69\xcf\x47\xb1\xf5\x89\xfb\x36\x28\x2d\x5f\xfb\x4f\x19\x37\x9a\xc6\xa9\x3a\x0c\xd9\xaf\x5c\xde\xc4\xe3\x64\x18\xb2\xdf\x6b\xb5\x71\x1f\x76\x61\x42\x87\xaf\xb0\x37\xe6\x15\xd7\xdb\xed\x7e\xb4\xe2\x6d\x99\x5a\xcd\xab\x0a\x35\x59\x42\x18\xad\x7b\x52\x8c\x43\x36\xd8\x5e\xd7\x5c\x30\x8d\x32\x48\xf6\x54\x0c\xda\xf2\x52\xa0\x19\x03\x47\x22\x3e\x52\x7f\x98\x8a\xc9\x28\xdf\xc7\x0c\x2c\x7b\x00\x95\x67\xe0\xb8\xff\x5f\x00\x00\x00\xff\xff\xd1\xe2\x7c\x13\x8c\x0f\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 3980, mode: os.FileMode(493), modTime: time.Unix(1670834992, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"errors/404.html":     errors404Html,
	"errors/500.html":     errors500Html,
	"index.html":          indexHtml,
	"layouts/footer.html": layoutsFooterHtml,
	"layouts/header.html": layoutsHeaderHtml,
	"layouts/layout.html": layoutsLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"errors": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{layoutsFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{layoutsHeaderHtml, map[string]*bintree{}},
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
