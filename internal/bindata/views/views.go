// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package views generated by go-bindata.// sources:
// web/views/errors/404.html
// web/views/errors/500.html
// web/views/index.html
// web/views/layouts/footer.html
// web/views/layouts/header.html
// web/views/layouts/layout.html
package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xcd\xe7\x79\x69\xa0\x87\x1d\xec\xc0\xe8\x5a\xd8\x65\xdb\xa1\x85\xed\xe8\xda\x3f\xb5\xc0\xb1\xb3\x54\x4d\xd9\xdb\x8f\x34\x1d\x74\x3b\x09\x7d\xfa\x3f\x81\x64\xee\x9e\xdf\x56\xdb\xcf\xf7\x35\x45\xe9\x52\x5b\x99\xa9\x50\x72\xf9\x60\x15\xb2\x9a\x00\x5c\x68\x2b\x22\x22\xd3\x41\x1c\xf9\xe8\x86\x23\xc4\xaa\xdd\x76\xa3\x1f\xd5\xed\x28\x8a\xf4\x1a\x5f\x27\x1e\xad\xfa\xd0\xbb\x27\xbd\x2a\x5d\xef\x84\xf7\x09\x8a\x7c\xc9\x82\x2c\x56\xbd\xac\x2d\xc2\x01\x7f\xcc\xec\x3a\x58\x35\x32\xce\x7d\x19\xe4\x26\x7c\xe6\x20\xd1\x06\x8c\xec\xa1\x2f\xcd\x3d\x71\x66\x61\x97\xf4\xd1\xbb\x04\xdb\x3c\x2c\x7e\x57\x09\x4b\x42\xbb\x5c\x2c\xe9\xb5\x08\x6d\xca\x29\x07\x53\xcf\xb0\x32\xf5\x7c\x88\xd9\x97\xf0\x7d\xcd\xc7\xa6\x35\x1e\x59\x30\xfc\x97\xae\xd4\xd4\xb1\x99\xd4\xd9\x31\xf5\xe5\x47\x3f\x01\x00\x00\xff\xff\xf0\x70\x71\x97\x33\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 307, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\x93\xf3\x42\xd9\x8d\x43\x52\x09\x8d\x21\x71\x1a\x87\x4d\x82\xa3\xd7\x5a\x8d\xa5\xd4\x29\xad\xb7\x6a\x6f\x8f\xba\x0c\x69\xdc\x38\x25\xbf\xfc\xf9\xb3\x6c\xff\xf0\xba\xdb\xec\xbf\x3e\xb6\x10\xb5\x4f\xb5\xf1\xcb\x03\x09\xa5\x0b\x96\xc4\xd6\xc6\xf8\x48\xd8\xd6\x06\x00\xc0\xf7\xa4\x08\x4d\xc4\x71\x22\x0d\xf6\xb0\x7f\x73\xcf\xf6\xbe\x14\x55\x07\x47\xdf\x27\x3e\x07\xfb\xe9\x0e\x2f\x6e\x93\xfb\x01\x95\x8f\x89\x2c\x34\x59\x94\x44\x83\x7d\xdf\x06\x6a\x3b\xfa\xd3\x29\xd8\x53\xb0\x67\xa6\x79\xc8\xa3\xde\xc1\x33\xb7\x1a\x43\x4b\x67\x6e\xc8\x5d\xc3\x0a\x58\x58\x19\x93\x9b\x1a\x4c\x14\xd6\x8f\x4f\xbf\x2a\x65\x4d\x54\xef\x4e\xc3\x04\x53\xee\x49\x23\x4b\x07\x33\x89\xc2\x3c\x66\xe9\x56\xa0\xe3\x05\xb0\x43\x16\x5f\x15\xd6\xf8\xaa\xec\x67\xfc\x31\xb7\x97\x9b\x27\xae\xcb\xe7\x1a\x1a\x12\xa5\xf1\x9f\xd6\x1b\x5c\x34\xd5\xe2\xf1\x55\x11\x2f\x93\x96\x13\xff\x04\x00\x00\xff\xff\x89\x94\x40\x58\x72\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 370, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\x2c\x2a\xc9\x4c\xce\x49\x55\x48\xce\x49\x2c\x2e\xb6\x55\xca\x4d\x2c\xca\x4e\xc9\x2f\xcf\xd3\x4d\xca\x4f\xa9\x54\xb2\xe3\x52\x50\x50\x50\xa8\xae\xd6\x73\x84\xa8\xaa\xad\xe5\xb2\xd1\x87\xea\xb0\x03\x04\x00\x00\xff\xff\x82\x8b\x94\x11\x3b\x00\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 59, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func layoutsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsFooterHtml,
		"layouts/footer.html",
	)
}

func layoutsFooterHtml() (*asset, error) {
	bytes, err := layoutsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/footer.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x41\x6a\xc4\x30\x0c\x05\xd0\x7d\x4f\x21\xb4\x17\xd9\xb7\x8e\xef\xa2\x49\x64\x47\xa9\x62\x0d\xb6\x63\x98\xdb\x97\x52\x3a\x84\x42\x61\x96\x12\xff\xff\x17\x56\x1d\xb0\x18\xb7\x36\xe3\xcd\xfd\x93\x36\xe1\x55\x2a\x82\xae\x7f\x1e\xd5\x4d\x66\x2c\x3c\x34\x73\x57\x2f\x18\xdf\x00\x00\x02\x3f\xeb\xbd\xc0\xfd\x34\x23\x93\xd4\x61\x6f\xd4\xdd\xed\xc6\x95\x78\xf9\xce\x43\xf7\x9c\x4d\xa8\x9d\xc7\xc1\xf5\x81\xb0\x55\x49\x33\xee\x3c\xb8\x2d\x55\xef\xfd\xfd\x03\x63\xd0\xdf\xb5\xc4\x90\x98\xd8\x34\x17\xda\xcf\xd6\x35\x3d\x30\x86\x49\x63\x98\xf8\x5f\xb9\x6a\xde\x7e\xe8\x4d\x0e\x79\xc2\x97\xe3\x35\xb6\x9d\x85\xfc\xc2\x85\x69\xd5\x11\xbf\x02\x00\x00\xff\xff\x39\xdf\x3f\x2c\x2c\x01\x00\x00")

func layoutsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsHeaderHtml,
		"layouts/header.html",
	)
}

func layoutsHeaderHtml() (*asset, error) {
	bytes, err := layoutsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/header.html", size: 300, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x6d\x8f\xdb\x36\x12\xfe\xac\x05\xf6\x3f\x30\x3c\xa0\x6b\x03\x2b\xa9\x9b\x4f\x87\xac\xe5\x22\xd9\xe4\x7a\x01\x8a\xf4\x2e\x4d\x81\x3b\x04\xc1\x61\x4c\x8e\x25\x7a\x29\x52\x25\x69\x7b\x15\xd7\xff\xfd\xc0\x17\x59\x76\xd7\x1b\xa4\xcd\x27\x93\x9c\x67\x5e\x38\xc3\x99\x47\x9e\x3d\x7b\xfd\xf3\xdd\x87\xff\xfe\xeb\x0d\x69\x5c\x2b\xe7\x97\x17\x33\xff\x4b\x24\xa8\xba\xa2\xa8\x68\x38\x41\xe0\xf3\xcb\x8b\x6c\xd6\xa2\x03\xc2\x1a\x30\x16\x5d\x45\x7f\xfd\xf0\x8f\xfc\xef\x74\x14\x34\xce\x75\x39\xfe\xb6\x16\x9b\x8a\xfe\x27\xff\xf5\x65\x7e\xa7\xdb\x0e\x9c\x58\x48\xa4\x84\x69\xe5\x50\xb9\x8a\xbe\x7d\x53\x21\xaf\xf1\x48\x4f\x41\x8b\x15\xdd\x08\xdc\x76\xda\xb8\x23\xe8\x56\x70\xd7\x54\x1c\x37\x82\x61\x1e\x36\xd7\x44\x28\xe1\x04\xc8\xdc\x32\x90\x58\xdd\x14\xdf\x47\x43\x4e\x38\x89\xf3\xdd\x8e\x14\xff\x44\xe0\x1f\xfc\x8e\xec\xf7\xb3\x32\x9e\x5f\x5e\x64\xbb\x9d\x58\x92\xe2\xa5\x02\xd9\x7f\x46\x53\xfc\xa8\x75\x2d\xf1\x25\xdf\xef\xbd\xb6\x65\x46\x74\x8e\x80\xed\x15\x23\xd6\xb0\x8a\xfa\xbb\xd8\x17\x65\xd9\x41\x8d\xc0\x9f\x17\x75\xc0\xdb\x5e\x71\xc1\xc0\x09\xad\x0a\xa6\xdb\x24\x2d\x57\xb6\x04\x6e\x17\x7d\x04\x15\x2b\xfb\x03\x93\xc2\xdf\x60\xb7\x3b\xe7\x91\x5e\x5e\x64\x59\xc6\x8c\xb6\x56\x1b\x51\x0b\x55\x51\x50\x5a\xf5\xad\x5e\x5b\x3a\x9f\x95\x31\x9a\x18\x34\xaa\x14\xa2\x14\xea\x9e\x18\x94\x15\xb5\xae\x97\x68\x1b\x44\x47\x89\xe0\x15\x75\x0d\xb6\x98\x33\x6b\x29\x69\x0c\x2e\x2b\x5a\x5a\x07\x4e\xb0\x92\x59\x5b\xd6\xc2\x35\xeb\x45\xde\x82\xb9\xe7\x7a\xab\x3c\xac\xe4\x60\xee\x0b\x8f\x9f\x3f\x6d\xf8\xac\xa5\x85\xd6\xf7\x79\x70\x57\x06\xec\xb7\x1a\xd9\xe2\xc2\x0a\xf7\xcd\x66\x58\x03\x9d\x43\x93\x2f\xb5\xe4\xdf\x7c\xaf\x4e\x0a\xe7\xd0\xfc\x79\x3b\x8d\xa8\x1b\x29\xea\xc6\x25\x4b\x70\x73\xd3\xe7\x7f\x2d\xd5\x2d\x08\x35\x68\x85\x57\x40\xfc\xdb\xfd\x51\x38\x90\xf7\xc5\x5d\x78\x5a\x6f\x5f\x93\x2f\xbd\x8b\xb3\xd7\x04\x79\x9f\x7e\x0e\x21\x1d\x1e\xd8\xe3\x0e\x79\x05\x82\xaf\xa3\x8f\x67\x79\x4e\xc2\x96\x80\x97\x3a\xc1\x2c\xc9\xf3\xf9\xd8\x39\x7e\x99\x6d\xc0\x90\xff\x35\xad\x23\x55\xfc\xf9\xfd\x77\xf2\xf1\xd3\xad\x97\x4c\x96\x6b\xc5\x7c\xd3\x4c\xa6\x64\xe7\x0f\x08\xf1\xe0\xa6\x25\x15\xe1\x9a\xad\x5b\x54\xae\x60\x06\xc1\xe1\x1b\x89\x7e\x37\xa1\xd1\x30\x9d\xde\x46\x7c\xd3\x16\xd6\x30\x52\x91\x43\x67\x36\x6d\xb1\xf0\x31\x85\x46\x6c\x5a\xdf\x75\xc7\xed\x96\xc2\xa7\xb7\xa3\x3f\x7b\xec\xae\x46\x97\x7c\xd9\x57\xfd\x07\xa8\xdf\x41\x8b\xa3\xd7\x8f\xdf\x7f\x4a\x8a\xb6\xe8\xc0\xa0\x72\xef\x34\xc7\x42\x28\x8b\xc6\xbd\xc2\xa5\x36\x38\x69\xda\x6b\x62\x63\x7c\xfb\xe9\x24\x2c\xce\xf6\xee\x53\xc3\x67\xcc\x6d\xdc\x13\x07\x35\x99\xd4\x0e\xea\x62\x65\xa7\xa7\x09\x3e\x37\x9a\xb6\xdb\x6d\x1a\x4b\x0e\xea\x16\x14\xd4\xfe\xd9\xea\xb6\xf4\x26\xca\x95\xfd\x41\xf0\x33\x03\x68\xbf\x3f\x1d\x31\xc7\x15\xdc\x0a\xc5\xf5\xb6\xe0\xe0\xe0\x27\xe8\xd1\x90\x8a\x3c\x3a\x1a\xab\x3a\x14\x95\x78\x7f\x93\xe9\xee\x80\x29\xba\xb5\x6d\x26\x60\xea\x90\x69\x3b\xbd\xf5\x17\xcd\x02\xea\x6a\x65\xaf\xae\x89\xc2\x2d\x79\x0d\x0e\x27\x53\x9f\xb5\x51\xc8\xb4\x5a\x8a\xfa\xea\x9a\x5c\x9d\x8b\xfb\xea\x4b\x29\x9e\x95\x89\xa4\x66\x0b\xcd\xfb\x70\x31\x2e\x36\x84\x49\xb0\xb6\xa2\xbe\xc1\xc9\x52\x2b\x97\x5b\xf1\x19\xf3\xe7\x71\xbd\x84\x56\xc8\x3e\xbf\x21\x4c\x4b\x6d\x62\xdb\xe6\xcf\x43\x5f\x3c\xd2\xce\xed\xba\x6d\xc1\xf4\x51\x9a\xcd\x18\x2a\x87\x26\x6e\xb2\x59\x37\x40\xa5\xae\x35\x25\x46\x4b\x4c\xeb\xf9\x0c\x52\x33\xd2\xc0\x4e\x23\x33\xc1\x7c\x56\x76\xc9\x5a\x79\x6c\x6e\xa6\x60\x93\x4c\x28\xd8\x88\x3a\xd0\x0d\x1d\x5c\xad\xe5\xe0\xeb\x34\xa2\x2c\xdb\xed\x0c\xa8\x1a\x49\xf1\x0e\x36\xe1\x6d\xc5\x43\xe2\xb0\xed\x24\x38\x24\xde\x9c\x2d\x3c\xbd\x53\x52\x1c\x21\x06\x8e\x09\xf6\xa5\x18\xec\x73\xb1\x11\x1c\x8d\x7f\x2e\x52\x0c\xee\xcb\xb5\x1c\x62\x56\xb0\x89\xa9\x2a\xb9\xd8\x9c\x4f\x9a\xaf\xc5\x90\xb1\x13\x19\xef\x73\xa1\x94\x37\x1e\xed\xee\x76\xc4\xa0\xe2\x68\x08\x95\xd0\xeb\xb5\xb3\xa1\x9e\x68\x52\xb8\x43\x7c\xc7\x56\x3c\xf9\xe6\x5b\x03\x5d\x87\x86\x12\x07\x0b\xa1\x38\x3e\x54\x34\xbf\x19\x2a\xe0\xe7\xe8\x21\x3d\x8f\x54\x4f\x02\xc8\x62\x27\xbe\x8f\x41\xb8\x06\x09\x5b\x1b\xdf\xf7\x63\xfa\x1a\x34\x98\xba\x72\x48\x6d\x2f\x50\xf2\x43\x70\xc9\x87\xe7\xe4\x38\x66\x7d\xea\x86\xdc\x04\xf1\xf0\x16\xfe\x16\xb2\x13\x6f\x48\x87\xa0\xc6\x62\xe7\xb5\xce\x9d\xee\xe8\x7c\x76\x28\xc6\x12\xc8\x12\x72\x30\x46\x6f\xf3\xb5\x97\x94\x62\xee\xdf\xd0\x70\xb9\x23\x3f\x47\xeb\xa3\xd2\x8c\xab\xa5\xd6\xfe\xad\x9d\x49\x79\x94\x1c\x52\x3e\x4b\x07\xa1\x9b\x92\xfe\xac\x4c\xfd\x35\x0c\xa6\x30\x92\x06\xa2\x59\x1d\xd1\x60\xb1\x3a\xfd\x98\x79\x4a\x61\xf5\xef\x35\x9a\xfe\x6b\xd1\x27\x5c\xff\x95\x3a\x07\x4e\xff\x4a\x7c\xa0\xdf\x3f\x60\xbf\xc0\xc1\x4f\x99\x49\x54\xdb\x3e\x36\xf6\x94\x06\xac\xe0\xa1\xd1\xfa\x4b\x3a\xbe\x16\xd0\x14\x9d\xd1\x0f\xfd\x24\x70\xa9\x56\xef\xf1\xb7\x35\x5a\xf7\x82\x4c\xe2\x00\xbd\x6e\x40\x71\x89\x66\x4a\xaa\x79\xe4\xdb\x4c\xa2\x23\xd0\x09\x52\x85\xd1\x9a\x6e\xf1\xb2\x13\xfb\xfd\xd5\xed\x01\xc0\xb4\xb1\xa7\x88\x3b\x6d\xec\x01\x22\x96\x13\x6f\xe2\x59\x45\xd6\x8a\xe3\x52\x28\xe4\xe4\xbb\xef\x48\x3a\xa3\x34\x71\x7b\x96\xc5\x28\x8a\xb5\x91\xa4\x22\xe3\xa6\x30\xd8\x49\x60\x38\xa1\xd0\x89\x22\x7e\x98\x7a\xbe\xa2\xd7\xde\x46\x24\xd2\x6c\x3f\xb8\x0a\xc1\xfc\xd1\xd7\x70\xf8\x67\x9c\x79\x9d\x1c\x54\xbf\xf5\xfd\x5b\xc0\xe7\xb6\xd8\x6a\x73\x8f\xc6\x16\x1c\x37\xf4\x3a\xd8\x3c\x71\x9e\xb2\x57\x28\x7c\x70\x29\xa3\x89\xe5\x2f\x2f\xb2\xbd\x5f\x9e\x2f\x0b\xd3\xca\x3a\x12\xab\x4e\xaa\x40\x72\x31\x8d\xb1\x4e\x2c\xbd\x99\x17\x27\x09\x4e\x87\xfb\xfd\xd5\xf5\x08\xfa\x05\x99\x41\x77\x06\x18\x05\x03\xd8\x60\xa7\x4f\x40\xef\xb1\xd3\x83\x50\x6f\x15\x9a\x13\xe9\xcf\xfe\x64\x10\x03\x6f\x85\x7a\x41\x3e\x9e\x91\x7f\x0a\x00\xc1\x4f\x94\xdf\xf2\x41\x53\xc2\x02\xa5\xf5\xaa\xf1\xaa\x57\x9f\x42\x5a\x02\x8f\xa7\x27\x1f\xe7\xca\x64\x00\x4c\x4f\x32\x76\xe0\x9b\x59\x99\xfe\x71\x86\xee\x8a\x55\x3e\xe1\xa8\x00\x1a\xf9\x28\xb5\x3e\xf1\xdf\x06\xcc\x89\x4d\xf8\x94\xf1\xa3\x69\x98\xaa\xbb\x5d\xf1\x93\x50\xf7\xe9\x38\xdb\xed\x8a\x5f\x1a\xbd\xf5\x1f\x76\x71\x42\xc7\xaf\xb0\xb7\xf6\xb5\x30\xfb\xfd\x38\x5a\xf1\x81\xe5\xce\x88\xba\x46\x43\x96\x10\x47\xeb\xd1\x1f\xaf\x38\x64\xa3\xee\x5d\x23\x24\x37\xa8\xa2\x64\xa4\x62\x30\x4e\x30\x89\x76\x70\x9c\x88\xf8\x04\xfe\x34\x15\x93\x41\x3e\xfa\x8c\x2c\x7b\x94\xaa\xc0\xc0\x69\xff\xff\x00\x00\x00\xff\xff\x48\x36\x89\x6c\xb3\x0f\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 4019, mode: os.FileMode(493), modTime: time.Unix(1671105924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"errors/404.html":     errors404Html,
	"errors/500.html":     errors500Html,
	"index.html":          indexHtml,
	"layouts/footer.html": layoutsFooterHtml,
	"layouts/header.html": layoutsHeaderHtml,
	"layouts/layout.html": layoutsLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"errors": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{layoutsFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{layoutsHeaderHtml, map[string]*bintree{}},
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
