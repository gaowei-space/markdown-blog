// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package views generated by go-bindata.// sources:
// web/views/errors/404.html
// web/views/errors/500.html
// web/views/index.html
// web/views/layouts/footer.html
// web/views/layouts/header.html
// web/views/layouts/layout.html
package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x0a\xcd\xe7\x79\x69\xa0\x87\x1d\xec\xc0\xe8\x5a\xd8\x65\xdb\xa1\x85\xed\xe8\xda\x3f\xb5\xc0\xb1\xb3\x54\x4d\xd9\xdb\x8f\x34\x1d\x74\x3b\x09\x7d\xfa\x3f\x81\x64\xee\x9e\xdf\x56\xdb\xcf\xf7\x35\x45\xe9\x52\x5b\x99\xa9\x50\x72\xf9\x60\x15\xb2\x9a\x00\x5c\x68\x2b\x22\x22\xd3\x41\x1c\xf9\xe8\x86\x23\xc4\xaa\xdd\x76\xa3\x1f\xd5\xed\x28\x8a\xf4\x1a\x5f\x27\x1e\xad\xfa\xd0\xbb\x27\xbd\x2a\x5d\xef\x84\xf7\x09\x8a\x7c\xc9\x82\x2c\x56\xbd\xac\x2d\xc2\x01\x7f\xcc\xec\x3a\x58\x35\x32\xce\x7d\x19\xe4\x26\x7c\xe6\x20\xd1\x06\x8c\xec\xa1\x2f\xcd\x3d\x71\x66\x61\x97\xf4\xd1\xbb\x04\xdb\x3c\x2c\x7e\x57\x09\x4b\x42\xbb\x5c\x2c\xe9\xb5\x08\x6d\xca\x29\x07\x53\xcf\xb0\x32\xf5\x7c\x88\xd9\x97\xf0\x7d\xcd\xc7\xa6\x35\x1e\x59\x30\xfc\x97\xae\xd4\xd4\xb1\x99\xd4\xd9\x31\xf5\xe5\x47\x3f\x01\x00\x00\xff\xff\xf0\x70\x71\x97\x33\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 307, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x0a\x93\xf3\x42\xd9\x8d\x43\x52\x09\x8d\x21\x71\x1a\x87\x4d\x82\xa3\xd7\x5a\x8d\xa5\xd4\x29\xad\xb7\x6a\x6f\x8f\xba\x0c\x69\xdc\x38\x25\xbf\xfc\xf9\xb3\x6c\xff\xf0\xba\xdb\xec\xbf\x3e\xb6\x10\xb5\x4f\xb5\xf1\xcb\x03\x09\xa5\x0b\x96\xc4\xd6\xc6\xf8\x48\xd8\xd6\x06\x00\xc0\xf7\xa4\x08\x4d\xc4\x71\x22\x0d\xf6\xb0\x7f\x73\xcf\xf6\xbe\x14\x55\x07\x47\xdf\x27\x3e\x07\xfb\xe9\x0e\x2f\x6e\x93\xfb\x01\x95\x8f\x89\x2c\x34\x59\x94\x44\x83\x7d\xdf\x06\x6a\x3b\xfa\xd3\x29\xd8\x53\xb0\x67\xa6\x79\xc8\xa3\xde\xc1\x33\xb7\x1a\x43\x4b\x67\x6e\xc8\x5d\xc3\x0a\x58\x58\x19\x93\x9b\x1a\x4c\x14\xd6\x8f\x4f\xbf\x2a\x65\x4d\x54\xef\x4e\xc3\x04\x53\xee\x49\x23\x4b\x07\x33\x89\xc2\x3c\x66\xe9\x56\xa0\xe3\x05\xb0\x43\x16\x5f\x15\xd6\xf8\xaa\xec\x67\xfc\x31\xb7\x97\x9b\x27\xae\xcb\xe7\x1a\x1a\x12\xa5\xf1\x9f\xd6\x1b\x5c\x34\xd5\xe2\xf1\x55\x11\x2f\x93\x96\x13\xff\x04\x00\x00\xff\xff\x89\x94\x40\x58\x72\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 370, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\x2c\x2a\xc9\x4c\xce\x49\x55\x48\xce\x49\x2c\x2e\xb6\x55\xca\x4d\x2c\xca\x4e\xc9\x2f\xcf\xd3\x4d\xca\x4f\xa9\x54\xb2\xe3\x52\x50\x50\x50\xa8\xae\xd6\x73\x84\xa8\xaa\xad\xe5\xb2\xd1\x87\xea\xb0\x03\x04\x00\x00\xff\xff\x82\x8b\x94\x11\x3b\x00\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 59, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func layoutsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsFooterHtml,
		"layouts/footer.html",
	)
}

func layoutsFooterHtml() (*asset, error) {
	bytes, err := layoutsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/footer.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x41\x6a\xc4\x30\x0c\x05\xd0\x7d\x4f\x21\xb4\x17\xd9\xb7\x8e\xef\xa2\x49\x64\x47\xa9\x62\x0d\xb6\x63\x98\xdb\x97\x52\x3a\x84\x42\x61\x96\x12\xff\xff\x17\x56\x1d\xb0\x18\xb7\x36\xe3\xcd\xfd\x93\x36\xe1\x55\x2a\x82\xae\x7f\x1e\xd5\x4d\x66\x2c\x3c\x34\x73\x57\x2f\x18\xdf\x00\x00\x02\x3f\xeb\xbd\xc0\xfd\x34\x23\x93\xd4\x61\x6f\xd4\xdd\xed\xc6\x95\x78\xf9\xce\x43\xf7\x9c\x4d\xa8\x9d\xc7\xc1\xf5\x81\xb0\x55\x49\x33\xee\x3c\xb8\x2d\x55\xef\xfd\xfd\x03\x63\xd0\xdf\xb5\xc4\x90\x98\xd8\x34\x17\xda\xcf\xd6\x35\x3d\x30\x86\x49\x63\x98\xf8\x5f\xb9\x6a\xde\x7e\xe8\x4d\x0e\x79\xc2\x97\xe3\x35\xb6\x9d\x85\xfc\xc2\x85\x69\xd5\x11\xbf\x02\x00\x00\xff\xff\x39\xdf\x3f\x2c\x2c\x01\x00\x00")

func layoutsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsHeaderHtml,
		"layouts/header.html",
	)
}

func layoutsHeaderHtml() (*asset, error) {
	bytes, err := layoutsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/header.html", size: 300, mode: os.FileMode(420), modTime: time.Unix(1670244046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x6d\x8f\xdb\x36\x12\xfe\xac\x05\xf6\x3f\x30\x3c\xa0\x6b\x03\x2b\xa9\x9b\x4f\x87\xac\xe5\x22\xd9\xe4\x8a\x00\x45\x7a\x97\xa6\xc0\x1d\x82\xe0\x30\x26\xc7\x12\xbd\x14\xa9\x92\x94\xbd\x8a\xeb\xff\x7e\xe0\x8b\xfc\x92\xf5\x06\xe9\xe5\x93\x49\xce\x33\x2f\x9c\xe1\xcc\x23\xcf\x9e\xbd\xfe\xf5\xee\xc3\x7f\xfe\xf9\x86\x34\xae\x95\xf3\xcb\x8b\x99\xff\x25\x12\x54\x5d\x51\x54\x34\x9c\x20\xf0\xf9\xe5\x45\x36\x6b\xd1\x01\x61\x0d\x18\x8b\xae\xa2\xbf\x7f\xf8\x47\xfe\x77\x7a\x10\x34\xce\x75\x39\xfe\xd1\x8b\x75\x45\xff\x9d\xff\xfe\x32\xbf\xd3\x6d\x07\x4e\x2c\x24\x52\xc2\xb4\x72\xa8\x5c\x45\xdf\xbe\xa9\x90\xd7\x78\xa4\xa7\xa0\xc5\x8a\xae\x05\x6e\x3a\x6d\xdc\x11\x74\x23\xb8\x6b\x2a\x8e\x6b\xc1\x30\x0f\x9b\x6b\x22\x94\x70\x02\x64\x6e\x19\x48\xac\x6e\x8a\x1f\xa3\x21\x27\x9c\xc4\xf9\x76\x4b\x8a\x0f\x7e\x45\x76\xbb\x59\x19\xcf\x2e\x2f\xb2\xed\x56\x2c\x49\xf1\x52\x81\x1c\x3e\xa3\x29\x7e\xd6\xba\x96\xf8\x92\xef\x76\x5e\xd3\x32\x23\x3a\x47\xc0\x0e\x8a\x11\x6b\x58\x45\xfd\x3d\xec\x8b\xb2\xec\xa0\x46\xe0\xcf\x8b\x3a\xe0\xed\xa0\xb8\x60\xe0\x84\x56\x05\xd3\x6d\x92\x96\x2b\x5b\x02\xb7\x8b\x21\x82\x8a\x95\xfd\x89\x49\xe1\xa3\xdf\x6e\xcf\x79\xa4\x97\x17\x59\x96\x31\xa3\xad\xd5\x46\xd4\x42\x55\x14\x94\x56\x43\xab\x7b\x4b\xe7\xb3\x32\x46\x13\x83\x46\x95\x42\x94\x42\xdd\x13\x83\xb2\xa2\xd6\x0d\x12\x6d\x83\xe8\x28\x11\xbc\xa2\xae\xc1\x16\x73\x66\x2d\x25\x8d\xc1\x65\x45\x4b\xeb\xc0\x09\x56\x32\x6b\xcb\x5a\xb8\xa6\x5f\xe4\x2d\x98\x7b\xae\x37\xca\xc3\x4a\x0e\xe6\xbe\xf0\xf8\xf9\xd3\x86\xcf\x5a\x5a\x68\x7d\x9f\x07\x77\x65\xc0\x7e\xaf\x91\x0d\x2e\xac\x70\xdf\x6d\x86\x35\xd0\x39\x34\xf9\x52\x4b\xfe\xdd\xf7\xea\xa4\x70\x0e\xcd\x5f\xb7\xd3\x88\xba\x91\xa2\x6e\x5c\xb2\x04\x37\x37\x43\xfe\xff\xa5\xba\x05\xa1\x46\xad\xf0\x0a\x88\x7f\xbb\x3f\x0b\x07\xf2\xbe\xb8\x0b\x4f\xeb\xed\x6b\xf2\xb5\x77\x71\xf6\x9a\x20\xef\xd3\xcf\x3e\xa4\xfd\x03\x7b\xdc\x21\xaf\x40\xf0\x3e\xfa\x78\x96\xe7\x24\x6c\x09\x78\xa9\x13\xcc\x92\x3c\x9f\x1f\x3a\xc7\x2f\xb3\x35\x18\xf2\xdf\xa6\x75\xa4\x8a\x3f\x7f\xfe\x49\x3e\x7e\xba\xf5\x92\xc9\xb2\x57\xcc\x37\xcd\x64\x4a\xb6\xfe\x80\x10\x0f\x6e\x5a\x52\x11\xae\x59\xdf\xa2\x72\x05\x33\x08\x0e\xdf\x48\xf4\xbb\x09\x8d\x86\xe9\xf4\x36\xe2\x9b\xb6\xb0\x86\x91\x8a\xec\x3b\xb3\x69\x8b\x85\x8f\x29\x34\x62\xd3\xfa\xae\x3b\x6e\xb7\x14\x3e\xbd\x3d\xf8\xb3\xc7\xee\x6a\x74\xc9\x97\x7d\x35\x7c\x80\xfa\x1d\xb4\x78\xf0\xfa\xf1\xc7\x4f\x49\xd1\x16\x1d\x18\x54\xee\x9d\xe6\x58\x08\x65\xd1\xb8\x57\xb8\xd4\x06\x27\x4d\x7b\x4d\x6c\x8c\x6f\x37\x9d\x84\xc5\xd9\xde\x7d\x6a\xf8\x1c\x72\x1b\xf7\xc4\x41\x4d\x26\xb5\x83\xba\x58\xd9\xe9\x69\x82\xcf\x8d\xa6\xcd\x66\x93\xc6\x92\x83\xba\x05\x05\xb5\x7f\xb6\xba\x2d\xbd\x89\x72\x65\x7f\x12\xfc\xcc\x00\xda\xed\x4e\x47\xcc\x71\x05\x37\x42\x71\xbd\x29\x38\x38\xf8\x05\x06\x34\xa4\x22\x8f\x8e\x0e\x55\x1d\x8b\x4a\xbc\xbf\xc9\x74\xbb\xc7\x14\x5d\x6f\x9b\x09\x98\x3a\x64\xda\x4e\x6f\xfd\x45\xb3\x80\xba\x5a\xd9\xab\x6b\xa2\x70\x43\x5e\x83\xc3\xc9\xd4\x67\xed\x20\x64\x5a\x2d\x45\x7d\x75\x4d\xae\xce\xc5\x7d\xf5\xb5\x14\xcf\xca\x44\x50\xb3\x85\xe6\x43\xb8\x18\x17\x6b\xc2\x24\x58\x5b\x51\xdf\xe0\x64\xa9\x95\xcb\xad\xf8\x8c\xf9\xf3\xb8\x5e\x42\x2b\xe4\x90\xdf\x10\xa6\xa5\x36\xb1\x6d\xf3\xe7\xa1\x2f\x1e\x69\xe7\xb6\x6f\x5b\x30\x43\x94\x66\x33\x86\xca\xa1\x89\x9b\x6c\xd6\x8d\x50\xa9\x6b\x4d\x89\xd1\x12\xd3\x7a\x3e\x83\xd4\x8c\xf4\x0b\x66\x82\xf9\xac\xec\x92\xb5\xf2\xd8\xdc\x4c\xc1\x3a\x99\x50\xb0\x16\x75\xa0\x1b\x3a\xba\xea\xe5\xe8\xeb\x34\xa2\x2c\xdb\x6e\x0d\xa8\x1a\x49\xf1\x0e\xd6\xe1\x6d\xc5\x43\xe2\xb0\xed\x24\x38\x24\xde\x9c\x2d\x3c\xb5\x53\x52\x1c\x21\x46\x8e\x09\xf6\xa5\x18\xed\x73\xb1\x16\x1c\x8d\x7f\x2e\x52\x8c\xee\xcb\x5e\x8e\x31\x2b\x58\xc7\x54\x95\x5c\xac\xcf\x27\xcd\xd7\x62\xcc\xd8\x89\x8c\x0f\xb9\x50\xca\x1b\x8f\x76\xb7\x5b\x62\x50\x71\x34\x84\x4a\x18\x74\xef\x6c\xa8\x27\x9a\x14\xee\x18\xdf\xb1\x15\x4f\xbe\xf9\xc6\x40\xd7\xa1\xa1\xc4\xc1\x42\x28\x8e\x0f\x15\xcd\x6f\xc6\x0a\xf8\x39\xba\x4f\xcf\x23\xd5\x93\x00\xb2\xd8\x89\xef\x63\x10\xae\x41\xc2\x7a\xe3\xfb\xfe\x90\xbe\x06\x0d\xa6\xae\x1c\x53\x3b\x08\x94\x7c\x1f\x5c\xf2\xe1\x39\x39\x8e\x59\x9f\xba\x31\x37\x41\x3c\xbe\x85\xbf\x85\xec\xc4\x1b\xd2\x31\xa8\x43\xb1\xf3\x5a\xe7\x4e\x77\x74\x3e\xdb\x17\x63\x09\x64\x09\x39\x18\xa3\x37\x79\xef\x25\xa5\x98\xfb\x37\x34\x5e\xee\xc8\xcf\xd1\xfa\xa8\x34\x87\xd5\x52\x6b\xff\xd6\xce\xa4\x3c\x4a\xf6\x29\x9f\xa5\x83\xd0\x4d\x49\x7f\x56\xa6\xfe\x1a\x07\x53\x18\x49\x23\xd1\xac\x8e\x68\xb0\x58\x9d\x7e\xcc\x3c\xa5\xb0\xfa\x57\x8f\x66\xf8\x56\xf4\x09\xd7\x7f\xa3\xce\x9e\xd3\xbf\x11\x1f\xe8\xf7\x0b\xec\x57\x38\xf8\x29\x33\x89\x6a\xdb\xc7\xc6\x9e\xd2\x80\x15\x3c\x34\x5a\x7f\x4d\xc7\xd7\x02\x9a\xa2\x33\xfa\x61\x98\x04\x2e\xd5\xea\x3d\xfe\xd1\xa3\x75\x2f\xc8\x24\x0e\xd0\xeb\x06\x14\x97\x68\xa6\xa4\x9a\x47\xbe\xcd\x24\x3a\x02\x9d\x20\x55\x18\xad\xe9\x16\x2f\x3b\xb1\xdb\x5d\xdd\xee\x01\x4c\x1b\x7b\x8a\xb8\xd3\xc6\xee\x21\x62\x39\xf1\x26\x9e\x55\xa4\x57\x1c\x97\x42\x21\x27\x3f\xfc\x40\xd2\x19\xa5\x89\xdb\xb3\x2c\x46\x51\xf4\x46\x92\x8a\x1c\x36\x85\xc1\x4e\x02\xc3\x09\x85\x4e\x14\xf1\xc3\xd4\xf3\x15\xbd\xf6\x36\x22\x91\x66\xbb\xd1\x55\x08\xe6\x4b\x5f\xe3\xe1\x5f\x71\xe6\x75\x72\x50\xc3\xc6\xf7\x6f\x01\x9f\xdb\x62\xa3\xcd\x3d\x1a\x5b\x70\x5c\xd3\xeb\x60\xf3\xc4\x79\xca\x5e\xa1\xf0\xc1\xa5\x8c\x26\x96\xbf\xbc\xc8\x76\x7e\x79\xbe\x2c\x4c\x2b\xeb\x48\xac\x3a\xa9\x02\xc9\xc5\x34\xc6\x3a\xb1\xf4\x66\x5e\x9c\x24\x38\x1d\xee\x76\x57\xd7\x07\xd0\x6f\xc8\x0c\xba\x33\xc0\x28\x18\xc1\x06\x3b\x7d\x02\x7a\x8f\x9d\x1e\x85\x7a\xa3\xd0\x9c\x48\x7f\xf5\x27\xa3\x18\x78\x2b\xd4\x0b\xf2\xf1\x8c\xfc\x53\x00\x08\x7e\xa2\xfc\x96\x8f\x9a\x12\x16\x28\xad\x57\x8d\x57\xbd\xfa\x14\xd2\x12\x78\x3c\x3d\xf9\x38\x57\x26\x23\x60\x7a\x92\xb1\x3d\xdf\xcc\xca\xf4\x6f\x33\x74\x57\xac\xf2\x09\x47\x05\xd0\x81\x8f\x52\xeb\x13\xff\x6d\xc0\x9c\x58\x87\x4f\x19\x3f\x9a\xc6\xa9\xba\xdd\x16\xbf\x08\x75\x9f\x8e\xb3\xed\xb6\xf8\xad\xd1\x1b\xff\x61\x17\x27\x74\xfc\x0a\x7b\x6b\x5f\x0b\xb3\xdb\x1d\x46\x2b\x3e\xb0\xdc\x19\x51\xd7\x68\xc8\x12\xe2\x68\x3d\xfa\xe3\x15\x87\x6c\xd4\xbd\x6b\x84\xe4\x06\x55\x94\x1c\xa8\x18\x8c\x13\x4c\xa2\x1d\x1d\x27\x22\x3e\x81\x3f\x4d\xc5\x64\x94\x1f\x7c\x46\x96\x3d\x4a\x55\x60\xe0\xb4\xff\x5f\x00\x00\x00\xff\xff\x17\x08\x62\xdb\xaf\x0f\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 4015, mode: os.FileMode(493), modTime: time.Unix(1671012711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"errors/404.html":     errors404Html,
	"errors/500.html":     errors500Html,
	"index.html":          indexHtml,
	"layouts/footer.html": layoutsFooterHtml,
	"layouts/header.html": layoutsHeaderHtml,
	"layouts/layout.html": layoutsLayoutHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"errors": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{layoutsFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{layoutsHeaderHtml, map[string]*bintree{}},
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
